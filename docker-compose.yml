---
## container configuration for ROS & Kamera
## USE THIS FOR BUILDING not running!
## X11 note: To enable window display from inside the container, you must first
## provide permissions with xhost, usually `xhost +local:root` (not the safest)
## You also have to volume mount `/tmp/.X11-unix`, blank out $DISPLAY, and
## disable X11 shared memory `QT_X11_NO_MITSHM=1`

version: '3.7'
services:
## ======================= base containers & bases ========================
  # Docker file for kamerad service
  kamerad:
    build:
      context: ./src/core/kamerad
    image: "kamera/kamerad:latest"
    profiles:
      - nuvo
      - all

  # The core ROS image with basic APT packages, no KAMERA code.
  core-ros-cudaoff:
    build:
      context: .
      dockerfile: docker/base/core-ros.dockerfile
    image: "kamera/base/core-ros-cudaoff:${TAG_KAMERA_DEPS:-latest}"
    profiles:
      - nuvo
      - gui
      - all

  # The core ROS image with CUDA and basic APT packages, no KAMERA code.
  core-ros-cudaon:
    build:
      context: .
      dockerfile: docker/base/core-ros-cuda.dockerfile
    image: "kamera/base/core-ros-cudaon:${TAG_KAMERA_DEPS:-latest}"
    profiles:
      - cuda
      - nuvo
      - all

## =========================== main (full dependencies) =======================

  ## This is the main image with all dependendencies required for KAMERA, built on
  # the basic ROS image.
  core-deps:
    build:
      context: .
      dockerfile: docker/base/core-deps.dockerfile
      args:
          CUDA: ${CUDA}
    image: "kamera/base/core-deps-cuda${CUDA}:${TAG_KAMERA_DEPS:-latest}"
    depends_on:
        - core-ros-cuda${CUDA}
    profiles:
      - nuvo
      - gui
      - cuda
      - all

  core-gui-deps:
    build:
      context: .
      dockerfile: docker/base/gui-deps.dockerfile
    image: "kamera/base/core-gui-deps:${TAG_KAMERA_GUI_DEPS:-latest}"
    depends_on:
        - core-deps
    profiles:
      - gui

  # Just for the catkin rebuild, if we want to save the static image.
  core-final:
    build:
      context: .
      dockerfile: docker/core.dockerfile
      args:
          CUDA: ${CUDA}
    image: "kamera/final/core-cuda${CUDA}:${TAG_KAMERA_FINAL:-latest}"
    tty: true
    network_mode: host
    depends_on:
        - core-deps
    volumes:
    - "/tmp/.X11-unix:/tmp/.X11-unix"
    - "${PWD}/src:/root/kamera/src"
    profiles:
      - nuvo
      - cuda
      - all

## =========================== gui =============================
  gui:
    container_name: gui
    build:
      context: .
      dockerfile: docker/gui.dockerfile
    image: "kamera/final/gui:${TAG_KAMERA_GUI:-latest}"
    depends_on:
        - core-gui-deps
    profiles:
      - gui

  postproc:
    build:
      context: .
      dockerfile: ./docker/kamerapy.dockerfile
      args:
        BRANCH: $BRANCH
    image: "kamera/final/postproc:${TAG_KAMERA_POSTPROC:-latest}"
    network_mode: host
    tty: true
    profiles:
      - nuvo
      - all
      - pf



## ========================== viame =============================
  viame-base:
    build:
      context: .
      dockerfile: docker/base/detector-viame-deps.dockerfile
      network: host
      args:
        VIAME_BRANCH: "${VIAME_BRANCH:-latest}"
    image: "kamera/base/viame:${VIAME_BRANCH:-latest}"
    profiles:
      - viame
      - all

  viame:
    build:
      context: .
      dockerfile: docker/detector.dockerfile
      network: host
      args:
        VIAME_BRANCH: "${VIAME_BRANCH:-latest}"
    image: "kamera/final/viame:${TAG_VIAME_KAMERA:-latest}"
    tty: true
    network_mode: host
    command: ["bash"]
    depends_on:
        - viame-base
    profiles:
      - viame
      - all

## ====================================================================
...
