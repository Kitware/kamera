#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import division, print_function
import os
import sys
import json
import yaml

from roskv.impl.redis_envoy import RedisEnvoy, redis_encode
from vprint import vprint

def menu_parser(description="roskv interface"):
    import argparse

    parser = argparse.ArgumentParser(description=description)
    parser.add_argument("-g", "--get", default=None, action="store", type=str, help="get a string/dict")
    parser.add_argument("-s", "--set", default=None, action="store", type=str, help="set a string/dict")
    parser.add_argument("--dry-run", default=None, action="store_true", help="state action without doing it")
    parser.add_argument("-r", "--read", default=None, action="store_true", help="read from stdin")
    parser.add_argument("-i", "--input_uri", default=None, action="store", type=str, help="an input file path")
    parser.add_argument('val', nargs='?', default=None, type=str, help="Value to be set")
    parser.add_argument("-H", "--host", default="nuvo0", action="store", type=str, help="redis host")

    parser.add_argument("-D", "--debug", action="store_true", help="Start in debug mode")

    return parser


def load_dict(input_uri, read_in=False):
    # type: (str, bool) -> dict
    if read_in:
        vprint("reading stdin")
        return json.load(sys.stdin)
    vprint('loading {}'.format(input_uri))
    ext = os.path.splitext(input_uri)[1]
    if ext == '.json':
        with open(input_uri, 'r') as fp:
            return json.load(fp)
    elif ext in ['.yml', '.yaml']:
        with open(input_uri, 'r') as fp:
            return yaml.load(fp, yaml.Loader)
    else:
        raise ValueError("Unknown file type: {}".format(input_uri))


def do_get(key, envoy):
    try:
        val = envoy.get(key)
    except KeyError:
        val = envoy.get_dict(key)
    print(json.dumps(val))


def format_tups(tups):
    tups = sorted(tups, key=lambda tup: tup[0])
    maxlen = max(map(len, [el[0] for el in tups]))
    lines = []
    for k, v in tups:
        lines.append('{k:{fill}<{width}}: {v}'.format(fill='.', width=maxlen, k=k, v=v))
    return lines


def do_put(key, val, envoy, dry_run=False):
    # type: (str, dict, RedisEnvoy, bool) -> None
    if dry_run:
        tups = redis_encode(key, val)
        for line in format_tups(tups):
            print(line)

        return
    envoy.put(key, val)

    return do_get(key, envoy)


def main():
    parser = menu_parser()
    args = parser.parse_args()
    vprint(args)
    envoy = RedisEnvoy(args.host, client_name="roskv")

    if args.get:
        do_get(args.get, envoy)

    elif args.set:
        if args.input_uri or args.read:
            val = load_dict(args.input_uri, args.read)
        else:
            val = args.val
        do_put(args.set, val, envoy, args.dry_run)


if __name__ == "__main__":
    main()
